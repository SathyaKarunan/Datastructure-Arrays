42. Trapping Rain Water
Hard

23857

331

Add to List

Share
Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.

 

Example 1:


Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.
Example 2:

Input: height = [4,2,0,3,2,5]
Output: 9
 

Constraints:

n == height.length
1 <= n <= 2 * 104
0 <= height[i] <= 105


Approach;
==>A ith bar can trap the water if and only if there exists a higher bar to the left and a higher bar to the right of ith bar.
==>To calculate how much amount of water the ith bar can trap, we need to look at the maximum height of the left bar and the maximum height of the right bar, then
==>The water level can be formed at ith bar is: waterLevel = min(maxLeft[i], maxRight[i])
==>If waterLevel >= height[i] then ith bar can trap waterLevel - height[i] amount of water.
==>To achieve in O(1) when looking at the maximum height of the bar on the left side and on the right side of ith bar, we pre-compute it:
==>Let maxLeft[i] is the maximum height of the bar on the left side of ith bar.
==>Let maxRight[i] is the maximum height of the bar on the right side of ith bar.
image

Code:

class Solution {
public:
    int trap(vector<int>& A) {
    int left=0;
    int n=A.size();
    int right =n-1;
    int ans=0;
    int maxleft=0,maxright=0;
    while(left<right){
    if(A[left]<=A[right]){
        if(A[left]<=maxleft)ans+=maxleft-A[left];
        else maxleft=A[left];
        left++;
    }
    else{
         if(A[right]<=maxright)ans+=maxright-A[right];
        else maxright=A[right];
        right--;
    }
    }
    return ans;
    }
    
};
