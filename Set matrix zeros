Given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0's.

You must do it in place.

 

Example 1:


Input: matrix = [[1,1,1],[1,0,1],[1,1,1]]
Output: [[1,0,1],[0,0,0],[1,0,1]]
Example 2:


Input: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]
Output: [[0,0,0,0],[0,4,5,0],[0,3,1,0]]
 

Constraints:

m == matrix.length
n == matrix[0].length
1 <= m, n <= 200
-231 <= matrix[i][j] <= 231 - 1
 

Follow up:

A straightforward solution using O(mn) space is probably a bad idea.
A simple improvement uses O(m + n) space, but still not the best solution.
Could you devise a constant space solution?


Approach:
=>Take two dummy array one of size of row and other of size of column.Now traverse through the array.
=>taking two dummy arrays we can use the first row and column of the matrix for the same work. This will help to reduce the space complexity of the problem. 
While traversing for the second time the first row and column will be computed first, 
which will affect the values of further elements thatâ€™s why we traversing in the reverse direction.



SOLUTION:

class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {
      int row = matrix.size();
      int column = matrix[0].size();
      int col0 = 1;
      for(int i=0;i<row;i++){
          if(matrix[i][0]==0){
          col0=0;
          }
      for(int j=1;j<column;j++){
          if(matrix[i][j]==0){
              matrix[0][j]=0;
              matrix[i][0]=0;
              
          }
      }
      }
      for(int i= row-1;i>=0;i--){
          for(int j= column-1;j>=1;j--){
              if(matrix[0][j]==0 || matrix[i][0]==0)
                  matrix[i][j]=0;
          }
          if(col0==0) 
              matrix[i][0]=0;
      }
      
      }
          
    };

