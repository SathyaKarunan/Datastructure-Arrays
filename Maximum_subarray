Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

A subarray is a contiguous part of an array.

 

Example 1:

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.
Example 2:

Input: nums = [1]
Output: 1
Example 3:

Input: nums = [5,4,-1,7,8]
Output: 23
 

Constraints:

1 <= nums.length <= 105
-104 <= nums[i] <= 104


Approach:KADANE'S ALGO
1)keep two variables to track current_max and max_so_far
2)If current max >max so far,update max-so_far
3)If current max being trcked<0,set current_max=0,repeat 1 and 2,finally return max_so_far

CODE:
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
      int max_end_here=0;
      int max_so_far=INT_MIN;
      int n=nums.size();
    
      for(int i=0;i<n;i++){
        max_end_here+=nums[i];
        if(max_end_here>max_so_far){
           max_so_far=max_end_here; 
        }
        if(max_end_here<0)
            max_end_here=0;
      }
        return max_so_far;
    }
};
