Given an array having both positive and negative integers. The task is to compute the length of the largest subarray with sum 0.

Example 1:

Input:
N = 8
A[] = {15,-2,2,-8,1,7,10,23}
Output: 5
Explanation: The largest subarray with
sum 0 will be -2 2 -8 1 7.
Your Task:
You just have to complete the function maxLen() which takes two arguments an array A and n, where n is the size of the array A and returns the length of the largest subarray with 0 sum.

Expected Time Complexity: O(N).
Expected Auxiliary Space: O(N).

Constraints:
1 <= N <= 105
-1000 <= A[i] <= 1000, for each valid i


Approach:
Create a variable sum and while traversing the input array,
for every index add the value of the element into the sum variable and then store the sum-index pair in a hash-map. 
So, if the same value appears twice in the array, it will be guaranteed that the particular array will be a zero-sum sub-array. 


Code:
class Solution{
    public:
    int maxLen(vector<int>&A, int n)
    {   
        // Your code here
        int sum=0;
        int maxi=0;
        unordered_map<int,int>mp;
        for(int i=0;i<n;i++){
            sum=sum+A[i];
            if(sum==0)maxi=i+1;
            else{
            if(mp.find(sum)!=mp.end()){
               maxi=max(i-mp[sum],maxi);
            }
            else{
                mp[sum]=i;
            }
            }
        }
        return maxi;
    }
};
