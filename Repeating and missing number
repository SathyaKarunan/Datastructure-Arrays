Problem Statement: You are given a read-only array of N integers with values also in the range [1, N] both inclusive. 
Each integer appears exactly once except A which appears twice and B which is missing. 
The task is to find the repeating and missing numbers A and B where A repeats twice and B is missing.

Example 1:

Input Format:  array[] = {3,1,2,5,3}

Result: {3,4)

Explanation: A = 3 , B = 4 
Since 3 is appearing twice and 4 is missing
Example 2:

Input Format: array[] = {3,1,2,5,4,6,7,5}

Result: {5,8)

Explanation: A = 5 , B = 8 
Since 5 is appearing twice and 8 is missing

Approach:
1)We can use sum and square of sum formula,but that may result in ovreflow
2)Other method - xor
=>xor all the elements in the array ,then xor it with numbers from 1 to n (since elements range from 1 to n)
=>the final answer will be xor of repeating and missing no.,as others would get cancelled
=>we dont two numbers,so elements are split based on set bit
=>If a bit is one ,then either of two numbers would be 1 at that bit
=>In our we took ,rightmost set bit ===> xor1 & ~(xor1-1)
xor1-1 ---> flips all the bits from right end to right most set bit(rmsb)(special bits)
~(xor1-1)--->flips all the bits,special bits will become original
xor1 & ~(xor1-1) ---> will keep the rightmost set bit alone


=>with the help of this rmsb,we split the elements as a nd b and xor it separately
=>to find repeating amd missing among those,traverse array to find it


Code:

vector<int> Solution::repeatedNumber(const vector<int> &A) {
    int n=A.size();
    int xor1=A[0];
    for(int i=1;i<n;i++){
        xor1^=A[i];
        xor1^=i;
    }
    xor1^=n;
    int setbit = xor1 & ~(xor1-1);
    int a=0;
    int b=0;
    for(int i=0;i<n;i++){
     if(setbit & A[i]){
         a^=A[i];
     }  
     else
        b^=A[i];
    }   
    for(int i=1;i<=n;i++){
     if(setbit & i){
         a^=i;
     }  
     else
        b^=i;
    }
    for(int i=0;i<n;i++){
        if(b==A[i]){
            return {b,a};
        }   
    }
    return {a,b}; 
    }

