Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.

You must write an algorithm that runs in O(n) time.

 

Example 1:

Input: nums = [100,4,200,1,3,2]
Output: 4
Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.
Example 2:

Input: nums = [0,3,7,2,5,8,4,6,0,1]
Output: 9
 

Constraints:

0 <= nums.length <= 105
-109 <= nums[i] <= 109

Approach:
First turn the input into a set of numbers. That takes O(n) and then we can ask in O(1) whether we have a certain number.

Then go through the numbers. If the number x is the start of a streak (i.e., x-1 is not in the set), then test y = x+1, x+2, x+3, ... 
and stop at the first number y not in the set. The length of the streak is then simply y-x and we update our global best with that. 
Since we check each streak only once, this is overall O(n). 

Code:
class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
    int n =nums.size();
    unordered_set<int>s;
    for(int i=0;i<n;i++){
        s.insert(nums[i]);
        
    }
    int count=0;
    int len=0;
    for(int i=0;i<n;i++){
     if(s.find(nums[i]-1)==s.end()){
         int curr=nums[i];
         count=0;
         while(s.find(curr)!=s.end()){
             count++;
             curr++;
         }
         len=max(len,count);
     }   
    }
        return len;
    }
};
