Count the number of subarrays with given xor K
Problem Statement: Given an array of integers A and an integer B. Find the total number of subarrays having bitwise XOR of all elements equal to B.

Examples:

Input Format:  A = [4, 2, 2, 6, 4] , B = 6
Result: 4
Explanation: The subarrays having XOR of their elements as 6 are  [4, 2], [4, 2, 2, 6, 4], [2, 2, 6], [6]

Input Format: A = [5, 6, 7, 8, 9], B = 5
Result: 2
Explanation:The subarrays having XOR of their elements as 2 are [5] and [5, 6, 7, 8, 9]


Approach:
1)In this we use a map to store xor of subarrays
2)If xor till particular pos is xr,then y=x^xr;
3)There are two ways possible for given xor,one is found during traversal
4)Other is we exor the current xor with x(i.e target xor),if xr^x is already there,then add that count also,refer below diagram
   y
  ........
'         '      if x^y = xr,then y = x^xr
'         '
1 2 3 4 5 5
'     ' '  '
'.....' '..'
  xr     x
  
  Code:
  
  int subarraysXor(vector<int> &arr, int x)
{
    //    Write your code here.
    int n=arr.size();
    int xr=0;
    int count=0;
    unordered_map<int,int>mp;
    for(int i=0;i<n;i++){
        xr^=arr[i];
        if(xr==x)count++;
        if(mp.find(xr^x)!=mp.end()){
            count+=mp[xr^x];    
        }
        mp[xr]++;
        }
      return count;
    
}
