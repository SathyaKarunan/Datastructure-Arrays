Implement pow(x, n), which calculates x raised to the power n (i.e., xn).

 

Example 1:

Input: x = 2.00000, n = 10
Output: 1024.00000
Example 2:

Input: x = 2.10000, n = 3
Output: 9.26100
Example 3:

Input: x = 2.00000, n = -2
Output: 0.25000
Explanation: 2-2 = 1/22 = 1/4 = 0.25
 

Constraints:

-100.0 < x < 100.0
-231 <= n <= 231-1
n is an integer.
-104 <= xn <= 104

Approach :
Binary exponentiation - T.C -->log n
2^11= (2^8)*(2^2)*(2^1)
11 base 2 ( binary format) ==>1011====> 1*(2^3)+0*(2^2)+1*(2^1)+1*(2^0)
==>Since the same product is performed mutiple times,we can simply square the pevious if we binary exponentiation
So T.C will reduce to log n.


Code:
class Solution {
public:
    double myPow(double x, int n) {
   
    if(n<0)x=1/x;
    long m = abs(n);
    
    double result = 1;
    while(m>0){
        if(m&1)result*=x;
        x*=x;
        m>>=1; //right shift=divide by 2
    }
        
        return result;
    }
};
