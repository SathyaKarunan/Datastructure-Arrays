Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.

 

Example 1:

Input: nums = [3,2,3]
Output: [3]
Example 2:

Input: nums = [1]
Output: [1]
Example 3:

Input: nums = [1,2]
Output: [1,2]
 

Constraints:

1 <= nums.length <= 5 * 104
-109 <= nums[i] <= 109
 

Follow up: Could you solve the problem in linear time and in O(1) space?



Approach:
-->Modified moore voting ,same concept but there may be two o/p elements,so we take two variables and counters
-->Consider two variables a,b and their counters
-->increment corresponding counter if current element is a or b
-->Else decrement both(this helps to cancel and keep only the excess count)


Code:

class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        int n=nums.size();
        int count1=0;
        int count2=0;
        int num1=-1;
        int num2=-1;
        for(auto i:nums){
            if(i==num1){
                count1++;
            }
            else if(i==num2){
                count2++;
            }
            else if(count1==0){
                num1=i;
                count1=1;
                
            }
             else if(count2==0){
                num2=i;
                count2=1;  
            }
            else{
                count1--;
                count2--;
            }
        }
        count1=count2=0;
        for(int i:nums){
            if(i==num1)count1++;
            else if(i==num2)count2++;
        }
        vector<int>ans;
        if(count1>n/3)ans.push_back(num1);
        if(count2>n/3)ans.push_back(num2);
        return ans; 
        }
   
};
